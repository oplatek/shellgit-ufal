#!/bin/bash

export OPENAI_API_KEY="$(cat ~/.ssh/openai_api_key)"

# Setup conda base environment:
# Go to https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links and select Miniconda 3 Linux 64-bit version
# Go to /lnet/work/people/oplatek/conda 
# Wget the installer e.g.  wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh 
# Install the miniconda bash Miniconda3-* -b -p $PWD/miniconda3_YOUR_NAME/ e.g. bash Miniconda3-py39_4.12.0-Linux-x86_64.sh -b -p $PWD/miniconda3_py39_4.12.0  
# Update the snippet bellow to point to the new conda dir
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/oplatek/code/conda/miniconda3_py39_4.12.0/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/oplatek/code/conda/miniconda3_py39_4.12.0/etc/profile.d/conda.sh" ]; then
        . "/home/oplatek/code/conda/miniconda3_py39_4.12.0/etc/profile.d/conda.sh"
    else
        export PATH="/home/oplatek/code/conda/miniconda3_py39_4.12.0/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# Autoloading conda environemnt based on ./env and GIT_ROOT/env naming convention I use
git_root="$(git rev-parse --show-toplevel)"
if [ -d "env/conda-meta" ] ; then
  conda activate ./env
elif [ -d "$git_root/env/conda-meta" ] ; then
  conda activate "$git_root/env"
fi

# autojump
[[ -s /ha/home/oplatek/.autojump/etc/profile.d/autojump.sh ]] && . /ha/home/oplatek/.autojump/etc/profile.d/autojump.sh

# Smart bash autocompletion
if [ -f /etc/bash_completion ]; then
 . /etc/bash_completion
fi
alias ufalgit='git --git-dir=$HOME/.shellgit-ufal.git/ --work-tree=$HOME'
alias gtop='nvidia-smi -l'
alias n="jupyter notebook --no-browser --ip 0.0.0.0"
alias i="ipython"
alias p="python"
alias x='xdg-open'
alias vi='vim'
alias vimdiff='vim -d'
alias view='vim -R'

# ssh firewalled
alias kronosssh="ssh -tY oplatek@kronos"
alias twisterssh="ssh -tY oplatek@twister1"
alias tunnel_kronos_8000to8000='ssh -N -f -L localhost:8000:localhost:8000 oplatek@kronos'

export PYTHONIOENCODING=utf-8


alias ssh='ssh -AX'
# see https://wiki.ufal.ms.mff.cuni.cz/internal:remote-access

allowed_ssh_agents=('blackbird geri freki sol2 sol8')  # login or work machines
source $HOME/bin/source_start_agent.sh "$allowed_ssh_agents"

sshcwd () {
  # save current running history so that it is available
  # immediatelly on the remote machine
  history -a;
  # setup the working directory by setting WD
  ssh -X -Y -t $@ "SSHAUTOWD='$PWD' /bin/bash --login -i";
}
# use WD to setup the working directory
if [ -n "$SSHAUTOWD" ]; then
  echo "Used working directory from previous computer"
  cd $SSHAUTOWD;
fi
# don't export the variable further, it would confuse qsub etc...
export -n SSHAUTOWD=""


# On TTYs only:
if ( tty -s ); then
    # Greeting
    echo -e 'Hi, this is\033[0;'${COLOR}'m' `hostname` '\033[0m' 1>&2
fi


export EMAIL="oplatek@ufal.mff.cuni.cz"

num_proc=$(grep processor /proc/cpuinfo | wc -l)
alias make="make -j $(($num_proc / 3))"


function notify () {
    date_time=`date`
    msg='No message'
    [ $# -ge 1 ] && msg="$1"
    [[ $# -gt 1 ]] && [[ -f "$2" ]] && input="$2" || input="-"

    cat "$input" | mailx -s "Notify $date_time: $msg" $EMAIL
}

function job_running () {
  job_id=$1
  job_st_last=unknown
  job_st=unknown
  echo todo not working
  while [[ $job_st = "Following jobs do not exits:"* ]] ; do
    job_st_last="$job_st"
    job_st="$(qstat -j $job_id)"
    sleep 1
  done
  msg="Job $job_id not found by qstat:$job_st. Last log is $job_st_last"
  2>&1 echo $msg
  echo $msg >(mail -s "Job not running $job_id $date_time: $msg" oplatek@ufal.mff.cuni.cz)
}
